// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArelympApi.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20240508170924_AssignedItemUserIdNullability")]
    partial class AssignedItemUserIdNullability
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.AssignedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipSlot")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId", "ItemId")
                        .IsUnique();

                    b.ToTable("AssignedItem");
                });

            modelBuilder.Entity("DataAccess.Entities.CharacterLoadout", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("CharacterSkinId")
                        .HasColumnType("integer");

                    b.Property<int>("WeaponSkinId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "CharacterId");

                    b.HasIndex("CharacterSkinId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("WeaponSkinId")
                        .IsUnique();

                    b.ToTable("CharacterLoadout");
                });

            modelBuilder.Entity("DataAccess.Entities.Equip", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int?>("AbilityFourSkinId")
                        .HasColumnType("integer");

                    b.Property<int?>("AbilityOneSkinId")
                        .HasColumnType("integer");

                    b.Property<int?>("AbilityThreeSkinId")
                        .HasColumnType("integer");

                    b.Property<int?>("AbilityTwoSkinId")
                        .HasColumnType("integer");

                    b.Property<int?>("ArmorEffectId")
                        .HasColumnType("integer");

                    b.Property<int?>("BannerId")
                        .HasColumnType("integer");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("CharacterSkinId")
                        .HasColumnType("integer");

                    b.Property<int?>("TitleId")
                        .HasColumnType("integer");

                    b.Property<int?>("VictoryPoseId")
                        .HasColumnType("integer");

                    b.Property<int?>("WeaponEffectId")
                        .HasColumnType("integer");

                    b.Property<int>("WeaponSkinId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("AbilityFourSkinId");

                    b.HasIndex("AbilityOneSkinId");

                    b.HasIndex("AbilityThreeSkinId");

                    b.HasIndex("AbilityTwoSkinId");

                    b.HasIndex("ArmorEffectId");

                    b.HasIndex("BannerId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CharacterSkinId");

                    b.HasIndex("TitleId");

                    b.HasIndex("VictoryPoseId");

                    b.HasIndex("WeaponEffectId");

                    b.HasIndex("WeaponSkinId");

                    b.ToTable("Equip");
                });

            modelBuilder.Entity("DataAccess.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BindedCharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<int>("EquipSlot")
                        .HasColumnType("integer");

                    b.Property<int?>("ItemSchemaId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemSchemaId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemSchema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("LeveledItemAssignedItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LeveledItemAssignedItemId");

                    b.ToTable("ItemSchema");
                });

            modelBuilder.Entity("DataAccess.Entities.LevelUpSchema", b =>
                {
                    b.Property<int>("ItemSchemaId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("ExpRequired")
                        .HasColumnType("integer");

                    b.HasKey("ItemSchemaId", "Level");

                    b.HasIndex("ItemSchemaId");

                    b.ToTable("LevelUpSchema");
                });

            modelBuilder.Entity("DataAccess.Entities.LeveledItem", b =>
                {
                    b.Property<int>("AssignedItemId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMaxed")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemExperience")
                        .HasColumnType("integer");

                    b.Property<int>("ItemLevel")
                        .HasColumnType("integer");

                    b.Property<int>("ItemSchemaId")
                        .HasColumnType("integer");

                    b.HasKey("AssignedItemId");

                    b.ToTable("LeveledItem");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Elo")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccess.Entities.AssignedItem", b =>
                {
                    b.HasOne("DataAccess.Entities.Item", "Item")
                        .WithMany("AssignedItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("AssignedItems")
                        .HasForeignKey("UserId");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.CharacterLoadout", b =>
                {
                    b.HasOne("DataAccess.Entities.Item", "CharacterSkin")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.CharacterLoadout", "CharacterSkinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.CharacterLoadout", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Item", "WeaponSkin")
                        .WithOne()
                        .HasForeignKey("DataAccess.Entities.CharacterLoadout", "WeaponSkinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterSkin");

                    b.Navigation("User");

                    b.Navigation("WeaponSkin");
                });

            modelBuilder.Entity("DataAccess.Entities.Equip", b =>
                {
                    b.HasOne("DataAccess.Entities.Item", "AbilityFourSkin")
                        .WithMany()
                        .HasForeignKey("AbilityFourSkinId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Entities.Item", "AbilityOneSkin")
                        .WithMany()
                        .HasForeignKey("AbilityOneSkinId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Entities.Item", "AbilityThreeSkin")
                        .WithMany()
                        .HasForeignKey("AbilityThreeSkinId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Entities.Item", "AbilityTwoSkin")
                        .WithMany()
                        .HasForeignKey("AbilityTwoSkinId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Entities.Item", "ArmorEffectSkin")
                        .WithMany()
                        .HasForeignKey("ArmorEffectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Entities.Item", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Entities.Item", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Item", "WeaponSkin")
                        .WithMany()
                        .HasForeignKey("CharacterSkinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Item", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Entities.Item", "VictoryPoseSkin")
                        .WithMany()
                        .HasForeignKey("VictoryPoseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Entities.Item", "WeaponEffect")
                        .WithMany()
                        .HasForeignKey("WeaponEffectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataAccess.Entities.Item", "CharacterSkin")
                        .WithMany()
                        .HasForeignKey("WeaponSkinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AbilityFourSkin");

                    b.Navigation("AbilityOneSkin");

                    b.Navigation("AbilityThreeSkin");

                    b.Navigation("AbilityTwoSkin");

                    b.Navigation("ArmorEffectSkin");

                    b.Navigation("Banner");

                    b.Navigation("Character");

                    b.Navigation("CharacterSkin");

                    b.Navigation("Title");

                    b.Navigation("VictoryPoseSkin");

                    b.Navigation("WeaponEffect");

                    b.Navigation("WeaponSkin");
                });

            modelBuilder.Entity("DataAccess.Entities.Item", b =>
                {
                    b.HasOne("DataAccess.Entities.ItemSchema", "ItemSchema")
                        .WithMany("Items")
                        .HasForeignKey("ItemSchemaId");

                    b.Navigation("ItemSchema");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemSchema", b =>
                {
                    b.HasOne("DataAccess.Entities.LeveledItem", null)
                        .WithMany("ItemSchema")
                        .HasForeignKey("LeveledItemAssignedItemId");
                });

            modelBuilder.Entity("DataAccess.Entities.LevelUpSchema", b =>
                {
                    b.HasOne("DataAccess.Entities.ItemSchema", "ItemSchema")
                        .WithMany("Levels")
                        .HasForeignKey("ItemSchemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemSchema");
                });

            modelBuilder.Entity("DataAccess.Entities.LeveledItem", b =>
                {
                    b.HasOne("DataAccess.Entities.AssignedItem", "AssignedItem")
                        .WithOne("LeveledItem")
                        .HasForeignKey("DataAccess.Entities.LeveledItem", "AssignedItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedItem");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.HasOne("DataAccess.Entities.Equip", "Equip")
                        .WithOne("User")
                        .HasForeignKey("DataAccess.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equip");
                });

            modelBuilder.Entity("DataAccess.Entities.AssignedItem", b =>
                {
                    b.Navigation("LeveledItem");
                });

            modelBuilder.Entity("DataAccess.Entities.Equip", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.Item", b =>
                {
                    b.Navigation("AssignedItems");
                });

            modelBuilder.Entity("DataAccess.Entities.ItemSchema", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Levels");
                });

            modelBuilder.Entity("DataAccess.Entities.LeveledItem", b =>
                {
                    b.Navigation("ItemSchema");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Navigation("AssignedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
